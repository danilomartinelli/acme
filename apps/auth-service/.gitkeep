# Auth Service

## Microserviço de Autenticação e Autorização

Responsável por todo o fluxo de autenticação, autorização e gerenciamento de usuários da plataforma Capsule.

### Responsabilidades

- **Autenticação**: Login, logout, validação de credenciais
- **Tokens**: Geração e validação de JWT e refresh tokens  
- **Usuários**: CRUD de usuários e perfis
- **Autorização**: Controle de permissões e roles (RBAC)
- **OAuth/SSO**: Integração com providers externos (futuro)
- **Sessões**: Gerenciamento de sessões ativas

### Comunicação

Este serviço **NÃO expõe endpoints HTTP**. Toda comunicação é feita via RabbitMQ:

#### Message Patterns (Request/Response)
- `auth.login` - Realizar login
- `auth.validate` - Validar token
- `auth.refresh` - Renovar token
- `auth.logout` - Realizar logout
- `user.create` - Criar usuário
- `user.get` - Buscar usuário
- `user.update` - Atualizar usuário
- `user.delete` - Deletar usuário

#### Event Patterns (Pub/Sub)
- `user.created` - Usuário criado
- `user.updated` - Usuário atualizado
- `user.deleted` - Usuário deletado
- `auth.login.success` - Login realizado
- `auth.logout.success` - Logout realizado

### Tecnologias

- NestJS (Microservice mode)
- RabbitMQ (transporte)
- PostgreSQL (persistência)
- Redis (cache de sessões)
- JWT (tokens)
- bcrypt (hashing)

### Estrutura Planejada

```
auth-service/
├── src/
│   ├── auth/
│   │   ├── auth.controller.ts
│   │   ├── auth.service.ts
│   │   └── strategies/
│   ├── users/
│   │   ├── users.controller.ts
│   │   └── users.service.ts
│   └── main.ts
└── README.md
```