# @libs/contexts/auth

## Contexto de Autenticação

Biblioteca compartilhada contendo a lógica de domínio relacionada à autenticação e autorização, reutilizável entre diferentes microserviços.

### Propósito

- **Lógica de Domínio**: Regras de negócio de autenticação isoladas
- **Entities**: Modelos de domínio (User, Session, Role)
- **Use Cases**: Casos de uso específicos do domínio auth
- **Repositories**: Interfaces para persistência
- **Domain Events**: Eventos de domínio relacionados à autenticação

### Estrutura Esperada

```
auth/
├── entities/
│   ├── user.entity.ts
│   ├── session.entity.ts
│   └── role.entity.ts
├── use-cases/
│   ├── login.use-case.ts
│   ├── validate-token.use-case.ts
│   └── refresh-token.use-case.ts
├── repositories/
│   └── user.repository.interface.ts
├── events/
│   └── auth.events.ts
└── index.ts
```

### Uso

```typescript
import { LoginUseCase, User } from '@libs/contexts/auth';

// Em auth-service
@Injectable()
export class AuthService {
  constructor(private loginUseCase: LoginUseCase) {}
  
  async login(email: string, password: string): Promise<User> {
    return this.loginUseCase.execute({ email, password });
  }
}
```

### Princípios

- **Domain-Driven Design**: Foco no domínio de autenticação
- **Clean Architecture**: Independente de frameworks e infraestrutura
- **SOLID**: Responsabilidade única e inversão de dependências
- **Testável**: Lógica pura sem dependências externas