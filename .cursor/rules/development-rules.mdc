# Regras de Desenvolvimento e Qualidade de C√≥digo - ACME

## üéØ **Formata√ß√£o e Estilo**

### Prettier e ESLint

- **Use Prettier** para formata√ß√£o autom√°tica (j√° configurado no workspace)
- **Mantenha consist√™ncia** com as configura√ß√µes do `.prettierrc`
- **Use 2 espa√ßos** para indenta√ß√£o
- **Sempre termine arquivos** com uma nova linha
- **Use ESLint** para linting (configurado no workspace)

### Configura√ß√µes

```json
// .prettierrc
{
  "semi": true,
  "trailingComma": "es5",
  "singleQuote": true,
  "printWidth": 80,
  "tabWidth": 2
}
```

## üîÑ **Git e Versionamento**

### Commits Sem√¢nticos

```bash
# ‚úÖ DO: Commits sem√¢nticos
feat: adiciona autentica√ß√£o JWT
fix: corrige valida√ß√£o de email
docs: atualiza README do projeto
refactor: refatora service de usu√°rios
test: adiciona testes para billing
chore: atualiza depend√™ncias
style: ajusta formata√ß√£o do c√≥digo
perf: otimiza query de usu√°rios
ci: configura GitHub Actions
build: ajusta configura√ß√£o do Vite
```

### Estrutura de Commits

```
<tipo>(<escopo>): <descri√ß√£o>

[corpo opcional]

[rodap√© opcional]
```

### Branches

```bash
# ‚úÖ DO: Nomes descritivos para branches
feature/user-authentication
fix/email-validation
hotfix/critical-security-issue
refactor/billing-service
docs/api-documentation
```

## üìù **Qualidade de C√≥digo**

### Nomenclatura

```typescript
// ‚úÖ DO: Nomes descritivos
const userRepository = new UserRepository();
const isValidEmail = validateEmail(email);
const handleUserLogin = async (credentials: LoginCredentials) => {};

// ‚ùå DON'T: Nomes gen√©ricos
const repo = new Repo();
const valid = check(email);
const handle = async (data) => {};
```

### Fun√ß√µes

```typescript
// ‚úÖ DO: Fun√ß√µes com responsabilidade √∫nica
const validateUserInput = (user: CreateUserDto): ValidationResult => {
  const errors: string[] = [];

  if (!user.email) {
    errors.push('Email is required');
  }

  if (!user.name) {
    errors.push('Name is required');
  }

  return {
    isValid: errors.length === 0,
    errors,
  };
};

// ‚ùå DON'T: Fun√ß√µes com m√∫ltiplas responsabilidades
const processUser = async (user: any) => {
  // Valida√ß√£o
  // Transforma√ß√£o
  // Persist√™ncia
  // Notifica√ß√£o
  // Logging
};
```

### Early Returns

```typescript
// ‚úÖ DO: Early returns para reduzir aninhamento
const getUserById = async (id: string): Promise<User | null> => {
  if (!id) {
    return null;
  }

  if (!isValidUUID(id)) {
    throw new Error('Invalid UUID format');
  }

  const user = await userRepository.findById(id);
  return user;
};

// ‚ùå DON'T: Aninhamento excessivo
const getUserById = async (id: string): Promise<User | null> => {
  if (id) {
    if (isValidUUID(id)) {
      const user = await userRepository.findById(id);
      return user;
    } else {
      throw new Error('Invalid UUID format');
    }
  } else {
    return null;
  }
};
```

## üöÄ **Performance**

### Otimiza√ß√µes

```typescript
// ‚úÖ DO: Lazy loading
const Dashboard = lazy(() => import('./Dashboard'));
const UserProfile = lazy(() => import('./UserProfile'));

// ‚úÖ DO: Memoiza√ß√£o
const expensiveCalculation = useMemo(() => {
  return computeExpensiveValue(data);
}, [data]);

const handleClick = useCallback(() => {
  console.log('Button clicked');
}, []);

// ‚úÖ DO: Debounce para inputs
const debouncedSearch = useMemo(
  () =>
    debounce((query: string) => {
      searchUsers(query);
    }, 300),
  []
);
```

### Bundle Size

```typescript
// ‚úÖ DO: Imports espec√≠ficos
import { Button } from '@acme/ui/react';
import { debounce } from 'lodash-es';

// ‚ùå DON'T: Imports completos
import * as UI from '@acme/ui/react';
import _ from 'lodash';
```

## üîí **Seguran√ßa**

### Valida√ß√£o

```typescript
// ‚úÖ DO: Valida√ß√£o de entrada
@Post()
@UsePipes(new ValidationPipe({ transform: true }))
async createUser(@Body() createUserDto: CreateUserDto) {
  return this.usersService.create(createUserDto);
}

// ‚úÖ DO: Sanitiza√ß√£o
const sanitizeInput = (input: string): string => {
  return input.trim().replace(/[<>]/g, '');
};
```

### Vari√°veis de Ambiente

```typescript
// ‚úÖ DO: Configura√ß√£o segura
@Injectable()
export class ConfigService {
  get jwtSecret(): string {
    const secret = process.env.JWT_SECRET;
    if (!secret) {
      throw new Error('JWT_SECRET is required');
    }
    return secret;
  }
}

// ‚ùå DON'T: Hardcoded secrets
const JWT_SECRET = 'my-secret-key';
```

## üìö **Documenta√ß√£o**

### JSDoc

```typescript
// ‚úÖ DO: Documenta√ß√£o de APIs p√∫blicas
/**
 * Creates a new user in the system
 * @param createUserDto - User creation data
 * @returns Promise<User> - Created user
 * @throws {ConflictException} When email already exists
 * @throws {ValidationException} When input is invalid
 */
async createUser(createUserDto: CreateUserDto): Promise<User> {
  // Implementation
}

// ‚úÖ DO: Documenta√ß√£o de interfaces
interface UserService {
  /**
   * Finds a user by their unique identifier
   * @param id - User UUID
   * @returns Promise<User | null> - User or null if not found
   */
  findById(id: string): Promise<User | null>;
}
```

### README

````markdown
# ACME Project

## Descri√ß√£o

Sistema de gerenciamento empresarial com arquitetura modular.

## Estrutura

- `apps/` - Aplica√ß√µes (dashboard, portal, api-gateway)
- `libs/` - Libraries compartilhadas
  - `contexts/` - Bounded contexts (backend)
  - `shared/` - Utilit√°rios compartilhados
  - `ui/` - Componentes UI (frontend)

## Comandos

```bash
# Desenvolvimento
nx serve dashboard
nx serve api-gateway

# Build
nx build dashboard
nx build api-gateway

# Testes
nx test dashboard
nx test api-gateway
```
````

````

## üß™ **Testes**

### Estrutura de Testes

```typescript
// ‚úÖ DO: Testes bem estruturados
describe('UserService', () => {
  let service: UserService;
  let mockRepository: jest.Mocked<UserRepository>;

  beforeEach(() => {
    mockRepository = {
      findById: jest.fn(),
      save: jest.fn(),
    };
    service = new UserService(mockRepository);
  });

  describe('findById', () => {
    it('should return user when found', async () => {
      const mockUser = { id: '1', name: 'John' };
      mockRepository.findById.mockResolvedValue(mockUser);

      const result = await service.findById('1');

      expect(result).toEqual(mockUser);
      expect(mockRepository.findById).toHaveBeenCalledWith('1');
    });

    it('should return null when user not found', async () => {
      mockRepository.findById.mockResolvedValue(null);

      const result = await service.findById('999');

      expect(result).toBeNull();
    });
  });
});
````

### Cobertura

```bash
# ‚úÖ DO: Executar testes com cobertura
nx test api-gateway --coverage
nx test dashboard --coverage

# Verificar cobertura m√≠nima
npm run test:coverage
```

## üîß **Ferramentas do Workspace**

### Comandos Nx

```bash
# ‚úÖ DO: Comandos espec√≠ficos por projeto
nx serve dashboard          # Dashboard
nx serve landing-page       # Landing page
nx serve portal            # Portal
nx serve api-gateway       # API Gateway

# Build
nx build dashboard
nx build api-gateway

# Testes
nx test dashboard
nx test api-gateway

# Linting
nx lint dashboard
nx lint api-gateway

# Affected
nx affected:build          # Build apenas projetos afetados
nx affected:test           # Testa apenas projetos afetados
```

### Cache do Nx

```bash
# ‚úÖ DO: Aproveitar cache
nx run-many --target=build --all --parallel=3

# Limpar cache quando necess√°rio
nx reset
```

## üé® **VSCode Configura√ß√£o**

### Extens√µes Recomendadas

```json
// .vscode/extensions.json
{
  "recommendations": [
    "esbenp.prettier-vscode",
    "dbaeumer.vscode-eslint",
    "bradlc.vscode-tailwindcss",
    "ms-vscode.vscode-typescript-next",
    "formulahendry.auto-rename-tag",
    "christian-kohler.path-intellisense"
  ]
}
```

### Settings

```json
// .vscode/settings.json
{
  "editor.formatOnSave": true,
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  },
  "typescript.preferences.importModuleSpecifier": "relative",
  "tailwindCSS.includeLanguages": {
    "typescript": "javascript",
    "typescriptreact": "javascript"
  }
}
```

## üö® **Anti-patterns a Evitar**

### ‚ùå N√ÉO fazer:

```typescript
// ‚ùå DON'T: Any types
const processData = (data: any) => {
  return data.map((item) => item.name);
};

// ‚ùå DON'T: Console.log em produ√ß√£o
console.log('User data:', user);

// ‚ùå DON'T: Fun√ß√µes muito longas
const processEverything = async () => {
  // 100+ linhas de c√≥digo
};

// ‚ùå DON'T: Imports n√£o utilizados
import { Button, Card, Modal, Dropdown } from '@acme/ui/react';
// S√≥ usa Button e Card
```

### ‚úÖ Fazer:

```typescript
// ‚úÖ DO: Tipos espec√≠ficos
const processData = (data: User[]) => {
  return data.map((user) => user.name);
};

// ‚úÖ DO: Logger estruturado
this.logger.log('User data processed', { userId: user.id });

// ‚úÖ DO: Fun√ß√µes pequenas e focadas
const validateUser = (user: User): ValidationResult => {
  // L√≥gica de valida√ß√£o
};

const saveUser = async (user: User): Promise<void> => {
  // L√≥gica de persist√™ncia
};

// ‚úÖ DO: Imports espec√≠ficos
import { Button, Card } from '@acme/ui/react';
```

## üìä **Monitoramento**

### Logging

```typescript
// ‚úÖ DO: Logging estruturado
@Injectable()
export class UserService {
  constructor(private readonly logger: Logger) {}

  async createUser(dto: CreateUserDto): Promise<User> {
    this.logger.log('Creating user', { email: dto.email });

    try {
      const user = await this.userRepository.save(dto);
      this.logger.log('User created successfully', { userId: user.id });
      return user;
    } catch (error) {
      this.logger.error('Failed to create user', { error, email: dto.email });
      throw error;
    }
  }
}
```

### M√©tricas

```typescript
// ‚úÖ DO: M√©tricas de performance
@Injectable()
export class MetricsService {
  recordApiCall(endpoint: string, duration: number) {
    // Registrar m√©trica
  }

  recordError(error: Error, context: string) {
    // Registrar erro
  }
}
```

## üîÑ **Refatora√ß√£o**

### Quando Refatorar

- **C√≥digo duplicado** em m√∫ltiplos lugares
- **Fun√ß√µes muito longas** (>20 linhas)
- **Classes com muitas responsabilidades**
- **Imports n√£o utilizados**
- **C√≥digo comentado** desnecess√°rio

### Processo de Refatora√ß√£o

1. **Identificar** c√≥digo candidato
2. **Escrever testes** para funcionalidade
3. **Refatorar** gradualmente
4. **Executar testes** a cada mudan√ßa
5. **Validar** funcionalidade
6. **Comitar** mudan√ßas pequenas

## üìã **Checklist de Qualidade**

### Antes do Commit

- [ ] **C√≥digo formatado** com Prettier
- [ ] **Linting** sem erros
- [ ] **Testes** passando
- [ ] **Imports** organizados
- [ ] **Nomes descritivos** para vari√°veis/fun√ß√µes
- [ ] **Documenta√ß√£o** atualizada
- [ ] **Commits sem√¢nticos** com mensagens claras
- [ ] **Sem credenciais** hardcoded
- [ ] **Tratamento de erros** adequado
- [ ] **Performance** considerada
      description:
      globs:
      alwaysApply: false

---
