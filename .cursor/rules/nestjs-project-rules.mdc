# Regras para Projetos NestJS no Workspace ACME

Voc√™ est√° trabalhando em projetos NestJS no workspace ACME. Siga estas diretrizes espec√≠ficas:

## üèóÔ∏è **Estrutura do API Gateway**

### Organiza√ß√£o de Arquivos

- **App Principal**: `apps/api-gateway/`
- **Estrutura**: Use `src/` como pasta principal
- **Entry Point**: `src/main.ts` - Configura√ß√£o da aplica√ß√£o
- **M√≥dulo Principal**: `src/app.module.ts` - Configura√ß√£o de m√≥dulos
- **Controllers**: Organize por funcionalidade em pastas separadas

### Estrutura Recomendada

```
apps/api-gateway/src/
‚îú‚îÄ‚îÄ main.ts                 # Entry point
‚îú‚îÄ‚îÄ app.module.ts          # M√≥dulo principal
‚îú‚îÄ‚îÄ app.controller.ts      # Controller principal
‚îú‚îÄ‚îÄ app.service.ts         # Service principal
‚îú‚îÄ‚îÄ common/               # Utilit√°rios compartilhados
‚îÇ   ‚îú‚îÄ‚îÄ decorators/       # Decorators customizados
‚îÇ   ‚îú‚îÄ‚îÄ filters/          # Exception filters
‚îÇ   ‚îú‚îÄ‚îÄ guards/           # Guards de autentica√ß√£o
‚îÇ   ‚îú‚îÄ‚îÄ interceptors/     # Interceptors
‚îÇ   ‚îî‚îÄ‚îÄ pipes/            # Pipes customizados
‚îú‚îÄ‚îÄ config/               # Configura√ß√µes
‚îú‚îÄ‚îÄ modules/              # M√≥dulos da aplica√ß√£o
‚îÇ   ‚îú‚îÄ‚îÄ auth/             # Autentica√ß√£o
‚îÇ   ‚îú‚îÄ‚îÄ users/            # Usu√°rios
‚îÇ   ‚îî‚îÄ‚îÄ health/           # Health checks
‚îî‚îÄ‚îÄ types/                # Tipos TypeScript
```

## üéØ **Controllers**

### Padr√µes de Controllers

```typescript
// ‚úÖ DO: Controller bem estruturado
@Controller('users')
@UseGuards(AuthGuard)
export class UsersController {
  constructor(
    private readonly usersService: UsersService,
    private readonly logger: Logger
  ) {}

  @Get()
  @UseInterceptors(LoggingInterceptor)
  async findAll(@Query() query: FindUsersDto): Promise<UserResponseDto[]> {
    this.logger.log('Finding all users');
    return this.usersService.findAll(query);
  }

  @Get(':id')
  @UseInterceptors(CacheInterceptor)
  async findOne(
    @Param('id', ParseUUIDPipe) id: string
  ): Promise<UserResponseDto> {
    return this.usersService.findOne(id);
  }

  @Post()
  @UsePipes(new ValidationPipe({ transform: true }))
  async create(@Body() createUserDto: CreateUserDto): Promise<UserResponseDto> {
    return this.usersService.create(createUserDto);
  }

  @Put(':id')
  async update(
    @Param('id', ParseUUIDPipe) id: string,
    @Body() updateUserDto: UpdateUserDto
  ): Promise<UserResponseDto> {
    return this.usersService.update(id, updateUserDto);
  }

  @Delete(':id')
  @HttpCode(204)
  async remove(@Param('id', ParseUUIDPipe) id: string): Promise<void> {
    await this.usersService.remove(id);
  }
}
```

### Valida√ß√£o e DTOs

```typescript
// ‚úÖ DO: DTOs com valida√ß√£o
import { IsString, IsEmail, IsOptional, MinLength } from 'class-validator';
import { Expose, Transform } from 'class-transformer';

export class CreateUserDto {
  @IsString()
  @MinLength(2)
  @Expose()
  name: string;

  @IsEmail()
  @Expose()
  email: string;

  @IsString()
  @MinLength(8)
  @Expose()
  password: string;

  @IsOptional()
  @IsString()
  @Expose()
  role?: string;
}

export class UpdateUserDto {
  @IsOptional()
  @IsString()
  @MinLength(2)
  @Expose()
  name?: string;

  @IsOptional()
  @IsEmail()
  @Expose()
  email?: string;
}
```

## üîß **Services**

### Padr√µes de Services

```typescript
// ‚úÖ DO: Service com inje√ß√£o de depend√™ncia
@Injectable()
export class UsersService {
  constructor(
    @InjectRepository(User)
    private readonly userRepository: Repository<User>,
    private readonly logger: Logger,
    private readonly eventEmitter: EventEmitter2
  ) {}

  async findAll(query: FindUsersDto): Promise<User[]> {
    const { page = 1, limit = 10, search } = query;

    const queryBuilder = this.userRepository.createQueryBuilder('user');

    if (search) {
      queryBuilder.where(
        'user.name ILIKE :search OR user.email ILIKE :search',
        {
          search: `%${search}%`,
        }
      );
    }

    const [users, total] = await queryBuilder
      .skip((page - 1) * limit)
      .take(limit)
      .getManyAndCount();

    this.logger.log(`Found ${users.length} users`);
    return users;
  }

  async findOne(id: string): Promise<User> {
    const user = await this.userRepository.findOne({ where: { id } });

    if (!user) {
      throw new NotFoundException(`User with ID ${id} not found`);
    }

    return user;
  }

  async create(createUserDto: CreateUserDto): Promise<User> {
    const existingUser = await this.userRepository.findOne({
      where: { email: createUserDto.email },
    });

    if (existingUser) {
      throw new ConflictException('User with this email already exists');
    }

    const user = this.userRepository.create(createUserDto);
    const savedUser = await this.userRepository.save(user);

    this.eventEmitter.emit('user.created', savedUser);
    this.logger.log(`User created with ID: ${savedUser.id}`);

    return savedUser;
  }

  async update(id: string, updateUserDto: UpdateUserDto): Promise<User> {
    const user = await this.findOne(id);

    Object.assign(user, updateUserDto);
    const updatedUser = await this.userRepository.save(user);

    this.eventEmitter.emit('user.updated', updatedUser);
    this.logger.log(`User updated with ID: ${id}`);

    return updatedUser;
  }

  async remove(id: string): Promise<void> {
    const user = await this.findOne(id);
    await this.userRepository.remove(user);

    this.eventEmitter.emit('user.deleted', { id });
    this.logger.log(`User deleted with ID: ${id}`);
  }
}
```

## üèõÔ∏è **M√≥dulos**

### Configura√ß√£o de M√≥dulos

```typescript
// ‚úÖ DO: M√≥dulo bem configurado
@Module({
  imports: [
    TypeOrmModule.forFeature([User]),
    forwardRef(() => AuthModule), // Evita depend√™ncia circular
  ],
  controllers: [UsersController],
  providers: [
    UsersService,
    {
      provide: APP_INTERCEPTOR,
      useClass: LoggingInterceptor,
    },
  ],
  exports: [UsersService], // Exporta para outros m√≥dulos
})
export class UsersModule {}
```

## üîê **Autentica√ß√£o e Autoriza√ß√£o**

### Guards

```typescript
// ‚úÖ DO: Guard de autentica√ß√£o
@Injectable()
export class AuthGuard implements CanActivate {
  constructor(
    private readonly jwtService: JwtService,
    private readonly usersService: UsersService
  ) {}

  async canActivate(context: ExecutionContext): Promise<boolean> {
    const request = context.switchToHttp().getRequest();
    const token = this.extractTokenFromHeader(request);

    if (!token) {
      throw new UnauthorizedException();
    }

    try {
      const payload = await this.jwtService.verifyAsync(token);
      const user = await this.usersService.findOne(payload.sub);
      request['user'] = user;
    } catch {
      throw new UnauthorizedException();
    }

    return true;
  }

  private extractTokenFromHeader(request: Request): string | undefined {
    const [type, token] = request.headers.authorization?.split(' ') ?? [];
    return type === 'Bearer' ? token : undefined;
  }
}
```

## üé® **Interceptors e Pipes**

### Interceptors

```typescript
// ‚úÖ DO: Interceptor de logging
@Injectable()
export class LoggingInterceptor implements NestInterceptor {
  constructor(private readonly logger: Logger) {}

  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {
    const request = context.switchToHttp().getRequest();
    const { method, url } = request;
    const now = Date.now();

    return next.handle().pipe(
      tap(() => {
        const response = context.switchToHttp().getResponse();
        const delay = Date.now() - now;

        this.logger.log(`${method} ${url} ${response.statusCode} ${delay}ms`);
      })
    );
  }
}
```

### Pipes Customizados

```typescript
// ‚úÖ DO: Pipe de transforma√ß√£o
@Injectable()
export class ParseUUIDPipe implements PipeTransform {
  transform(value: string): string {
    if (!isUUID(value)) {
      throw new BadRequestException('Invalid UUID format');
    }
    return value;
  }
}
```

## üóÑÔ∏è **Banco de Dados**

### Entidades

```typescript
// ‚úÖ DO: Entidade com decorators
@Entity('users')
export class User {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @Column({ type: 'varchar', length: 255 })
  name: string;

  @Column({ type: 'varchar', length: 255, unique: true })
  email: string;

  @Column({ type: 'varchar', length: 255 })
  @Exclude()
  password: string;

  @Column({ type: 'enum', enum: UserRole, default: UserRole.USER })
  role: UserRole;

  @CreateDateColumn()
  createdAt: Date;

  @UpdateDateColumn()
  updatedAt: Date;

  @BeforeInsert()
  @BeforeUpdate()
  async hashPassword() {
    if (this.password) {
      this.password = await hash(this.password, 10);
    }
  }
}
```

## üß™ **Testes**

### Testes de Controllers

```typescript
// ‚úÖ DO: Teste de controller
describe('UsersController', () => {
  let controller: UsersController;
  let service: UsersService;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [UsersController],
      providers: [
        {
          provide: UsersService,
          useValue: {
            findAll: jest.fn(),
            findOne: jest.fn(),
            create: jest.fn(),
            update: jest.fn(),
            remove: jest.fn(),
          },
        },
      ],
    }).compile();

    controller = module.get<UsersController>(UsersController);
    service = module.get<UsersService>(UsersService);
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });

  describe('findAll', () => {
    it('should return an array of users', async () => {
      const result = [{ id: '1', name: 'Test User' }];
      jest.spyOn(service, 'findAll').mockResolvedValue(result);

      expect(await controller.findAll({})).toBe(result);
    });
  });
});
```

## üöÄ **Comandos de Desenvolvimento**

### Comandos Espec√≠ficos

```bash
# Desenvolvimento
nx serve api-gateway          # Inicia servidor de desenvolvimento
nx build api-gateway          # Build para produ√ß√£o
nx test api-gateway           # Executa testes
nx lint api-gateway           # Executa linting

# Debugging
nx serve api-gateway --inspect  # Com debugging habilitado
```

## üö® **Anti-patterns a Evitar**

### ‚ùå N√ÉO fazer:

```typescript
// ‚ùå DON'T: L√≥gica de neg√≥cio em controllers
@Controller('users')
export class UsersController {
  @Post()
  async create(@Body() dto: CreateUserDto) {
    // ‚ùå L√≥gica de neg√≥cio aqui
    const hashedPassword = await hash(dto.password, 10);
    const user = new User();
    user.name = dto.name;
    user.email = dto.email;
    user.password = hashedPassword;
    return this.userRepository.save(user);
  }
}

// ‚ùå DON'T: Valida√ß√£o manual
@Post()
async create(@Body() dto: any) {
  if (!dto.email || !dto.name) {
    throw new BadRequestException('Missing required fields');
  }
  // ...
}
```

### ‚úÖ Fazer:

```typescript
// ‚úÖ DO: Delegate para service
@Controller('users')
export class UsersController {
  constructor(private readonly usersService: UsersService) {}

  @Post()
  async create(@Body() dto: CreateUserDto) {
    return this.usersService.create(dto);
  }
}

// ‚úÖ DO: Usar DTOs com valida√ß√£o
@Post()
@UsePipes(new ValidationPipe({ transform: true }))
async create(@Body() dto: CreateUserDto) {
  return this.usersService.create(dto);
}
```

## üîß **Configura√ß√£o**

### Environment Variables

```typescript
// ‚úÖ DO: Configura√ß√£o com valida√ß√£o
@Injectable()
export class ConfigService {
  constructor() {
    this.validate();
  }

  get port(): number {
    return parseInt(process.env.PORT || '3000', 10);
  }

  get databaseUrl(): string {
    return process.env.DATABASE_URL || 'postgresql://localhost/acme';
  }

  get jwtSecret(): string {
    const secret = process.env.JWT_SECRET;
    if (!secret) {
      throw new Error('JWT_SECRET is required');
    }
    return secret;
  }

  private validate(): void {
    const required = ['JWT_SECRET', 'DATABASE_URL'];
    for (const env of required) {
      if (!process.env[env]) {
        throw new Error(`${env} environment variable is required`);
      }
    }
  }
}
```

description:
globs:
alwaysApply: false

---
