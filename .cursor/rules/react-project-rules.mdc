# Regras para Projetos React no Workspace ACME

Voc√™ est√° trabalhando em projetos React no workspace ACME. Siga estas diretrizes espec√≠ficas:

## üèóÔ∏è **Estrutura de Projetos React**

### Organiza√ß√£o de Arquivos

- **Apps React**: `apps/dashboard/`, `apps/landing-page/`, `apps/portal/`
- **Estrutura**: Use `app/` como pasta principal (padr√£o Vite + React Router)
- **Rotas**: Organize em `app/routes/` seguindo conven√ß√µes do React Router
- **Componentes**: Mantenha pr√≥ximos aos arquivos que os utilizam
- **Testes**: Use `tests/` na raiz de cada app

### Apps Dispon√≠veis

- **`dashboard`**: Painel administrativo interno
- **`landing-page`**: P√°gina de marketing/landing
- **`portal`**: Portal principal da aplica√ß√£o

## üéØ **Componentes React**

### Padr√µes de Componentes

```tsx
// ‚úÖ DO: Componente funcional com TypeScript
interface ButtonProps {
  variant?: 'primary' | 'secondary' | 'danger';
  children: React.ReactNode;
  onClick?: () => void;
  disabled?: boolean;
}

export const Button: React.FC<ButtonProps> = ({
  variant = 'primary',
  children,
  onClick,
  disabled = false,
}) => {
  const baseClasses = 'px-4 py-2 rounded font-medium transition-colors';
  const variants = {
    primary: 'bg-blue-500 text-white hover:bg-blue-600',
    secondary: 'bg-gray-200 text-gray-800 hover:bg-gray-300',
    danger: 'bg-red-500 text-white hover:bg-red-600',
  };

  return (
    <button
      className={`${baseClasses} ${variants[variant]}`}
      onClick={onClick}
      disabled={disabled}
    >
      {children}
    </button>
  );
};
```

### Hooks e Estado

- **Estado Local**: Use `useState` e `useEffect` para estado simples
- **Estado Global**: Use Context API para estado compartilhado entre componentes
- **Hooks Customizados**: Crie em `app/hooks/` para l√≥gica reutiliz√°vel
- **Evite Prop Drilling**: Use Context ou composi√ß√£o quando necess√°rio

## üõ£Ô∏è **Roteamento com React Router**

### Configura√ß√£o de Rotas

```tsx
// app/routes.tsx
import { createBrowserRouter } from 'react-router-dom';
import { Root } from './root';
import { About } from './routes/about';

export const router = createBrowserRouter([
  {
    path: '/',
    element: <Root />,
    children: [
      {
        index: true,
        element: <Dashboard />,
      },
      {
        path: 'about',
        element: <About />,
      },
    ],
  },
]);
```

### Boas Pr√°ticas de Roteamento

- **Lazy Loading**: Use `lazy()` para rotas grandes
- **Rotas Protegidas**: Implemente guards para autentica√ß√£o
- **URLs Limpas**: Use URLs descritivas e RESTful
- **Navega√ß√£o**: Use `Link` para navega√ß√£o interna

## üé® **Estiliza√ß√£o com Tailwind CSS**

### Classes Utilit√°rias

```tsx
// ‚úÖ DO: Organizar classes por categoria
<div className="
  /* Layout */
  flex items-center justify-between
  /* Espa√ßamento */
  p-4 md:p-6 lg:p-8
  /* Visual */
  bg-white rounded-lg shadow-md
  /* Intera√ß√£o */
  hover:shadow-lg transition-shadow
  /* Responsividade */
  w-full md:w-auto
">
```

### Responsividade

- **Mobile-First**: Comece com classes mobile, depois adicione breakpoints
- **Breakpoints**: `sm:`, `md:`, `lg:`, `xl:`, `2xl:`
- **Teste**: Sempre teste em diferentes tamanhos de tela

## üß™ **Testes**

### Estrutura de Testes

```tsx
// tests/routes/about.spec.tsx
import { render, screen } from '@testing-library/react';
import { About } from '../app/routes/about';

describe('About', () => {
  it('should render about page', () => {
    render(<About />);
    expect(screen.getByText(/sobre/i)).toBeInTheDocument();
  });
});
```

### Boas Pr√°ticas de Teste

- **Testing Library**: Use `@testing-library/react` para testes de componentes
- **Teste Comportamento**: Teste o que o usu√°rio v√™, n√£o implementa√ß√£o
- **Mocks**: Use mocks para depend√™ncias externas
- **Cobertura**: Mantenha boa cobertura de testes

## üöÄ **Desenvolvimento**

### Comandos Espec√≠ficos

```bash
# Dashboard
nx serve dashboard          # Desenvolvimento
nx build dashboard          # Build produ√ß√£o
nx test dashboard           # Testes
nx lint dashboard           # Linting

# Landing Page
nx serve landing-page       # Desenvolvimento
nx build landing-page       # Build produ√ß√£o
nx test landing-page        # Testes
nx lint landing-page        # Linting

# Portal
nx serve portal             # Desenvolvimento
nx build portal             # Build produ√ß√£o
nx test portal              # Testes
nx lint portal              # Linting
```

### Ferramentas de Desenvolvimento

- **Vite**: Desenvolvimento r√°pido com hot reload
- **React DevTools**: Debugging de componentes
- **Tailwind CSS IntelliSense**: Autocomplete de classes
- **ESLint + Prettier**: Qualidade e formata√ß√£o de c√≥digo

## üì¶ **Integra√ß√£o com Libraries**

### UI Components

```tsx
// ‚úÖ DO: Usar componentes da library UI
import { Button, Card } from '@acme/ui/react';

export const Dashboard = () => {
  return (
    <Card>
      <Button variant="primary">A√ß√£o</Button>
    </Card>
  );
};
```

### Shared Types

```tsx
// ‚úÖ DO: Usar tipos compartilhados
import { UserDto } from '@acme/shared/dto';

interface UserProfileProps {
  user: UserDto;
}
```

## üö® **Anti-patterns a Evitar**

### ‚ùå N√ÉO fazer:

```tsx
// ‚ùå DON'T: Componente de classe desnecess√°rio
class Button extends React.Component {
  render() {
    return <button>{this.props.children}</button>;
  }
}

// ‚ùå DON'T: Classes CSS inline
<div style={{ padding: '1rem', backgroundColor: 'white' }}>

// ‚ùå DON'T: L√≥gica complexa em componentes
const ComplexComponent = () => {
  // 100+ linhas de l√≥gica aqui
};
```

### ‚úÖ Fazer:

```tsx
// ‚úÖ DO: Componente funcional simples
const Button: React.FC<ButtonProps> = ({ children }) => (
  <button className="px-4 py-2 bg-blue-500 text-white rounded">
    {children}
  </button>
);

// ‚úÖ DO: Classes Tailwind organizadas
<div className="p-4 bg-white rounded shadow">

// ‚úÖ DO: L√≥gica em hooks customizados
const useUserData = () => {
  // L√≥gica complexa aqui
  return { user, loading, error };
};
```

## üîß **Performance**

### Otimiza√ß√µes

- **React.memo()**: Para componentes que re-renderizam desnecessariamente
- **useMemo/useCallback**: Para c√°lculos e fun√ß√µes custosas
- **Lazy Loading**: Para componentes e rotas grandes
- **Code Splitting**: Aproveite o Vite para divis√£o autom√°tica

### Monitoramento

- **React DevTools Profiler**: Analise performance de componentes
- **Bundle Analyzer**: Monitore tamanho do bundle
- **Lighthouse**: Teste performance geral da aplica√ß√£o
  description:
  globs:
  alwaysApply: false

---
