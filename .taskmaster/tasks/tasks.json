{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Configurar Monorepo Nx com Estrutura Base",
        "description": "Finalizar configura√ß√£o do monorepo Nx com ajustes na estrutura de pastas conforme PRD, implementar module boundaries e scripts de desenvolvimento",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "details": "Projeto j√° tem Nx 21.4.1 configurado com TypeScript 5.8.2, ESLint, Prettier, Docker Compose e testes. Necess√°rio: adicionar .nvmrc Node 20 LTS, configurar tags e module boundaries no nx.json, renomear/adicionar apps conforme PRD (service-auth, service-deploy, service-billing, cli), configurar enforce-module-boundaries no ESLint, adicionar scripts de desenvolvimento e CI/CD base.",
        "testStrategy": "Validar que nx graph mostra corretamente as depend√™ncias, executar nx run-many --target=lint para verificar boundaries, testar que nx affected funciona corretamente ap√≥s mudan√ßas",
        "subtasks": [
          {
            "id": 1,
            "title": "Adicionar .nvmrc e Ajustar Estrutura de Apps",
            "description": "Adicionar .nvmrc com Node 20 LTS e ajustar estrutura de apps para seguir o PRD",
            "status": "done",
            "dependencies": [],
            "details": "Criar .nvmrc com Node 20 LTS. Renomear apps existentes: dashboard ‚Üí service-auth, landing-page ‚Üí portal. Gerar novos apps: service-deploy, service-billing (NestJS), cli (Node). Manter api-gateway e portal existentes. Verificar que estrutura libs/ est√° correta com contexts/, shared/, ui/.\n<info added on 2025-08-24T15:39:11.087Z>\nBaseado na an√°lise real da estrutura do projeto, os ajustes necess√°rios s√£o:\n\n**‚úÖ Estrutura Existente Confirmada:**\n- api-gateway (microservi√ßo principal j√° configurado)\n- dashboard (esqueleto do backoffice/admin - manter como est√°)\n- landing-page (esqueleto da p√°gina de marketing - manter como est√°)\n- portal (esqueleto do painel de clientes/usu√°rios - manter como est√°)\n- libs/contexts/billing, deploy, discovery (j√° existem)\n- libs/shared/dto, types (j√° existem)\n- libs/ui/react (j√° existe)\n\n**üîÑ A√ß√µes Necess√°rias:**\n- Criar .nvmrc com Node 20 LTS na raiz do projeto\n- Gerar service-auth (novo app NestJS para autentica√ß√£o)\n- Gerar service-deploy (novo app NestJS para deploys)\n\n**‚ùå Removido do Escopo:**\n- CLI (n√£o faz parte do MVP1)\n- Renomea√ß√£o de apps existentes (dashboard e landing-page s√£o esqueletos v√°lidos que devem ser mantidos)\n- service-billing (n√£o mencionado como necess√°rio na an√°lise atual)\n\nA estrutura de libs/ j√° est√° correta e alinhada com o PRD.\n</info added on 2025-08-24T15:39:11.087Z>\n<info added on 2025-08-24T15:39:20.992Z>\n**Estrat√©gia de Teste Atualizada:**\n\nVerificar que .nvmrc foi criado na raiz do projeto e cont√©m a vers√£o Node 20 LTS. Executar nx list para confirmar que os novos apps service-auth e service-deploy aparecem na listagem de projetos dispon√≠veis. Rodar nx run-many --target=build --all para validar que todos os apps, incluindo os rec√©m-criados, compilam sem erros. Inspecionar a estrutura dos novos apps service-auth e service-deploy para confirmar que seguem o padr√£o NestJS correto com src/app/app.module.ts, main.ts e arquivos de configura√ß√£o apropriados. Verificar que a estrutura de libs/ (contexts/, shared/, ui/) permanece inalterada e funcional ap√≥s as modifica√ß√µes.\n</info added on 2025-08-24T15:39:20.992Z>",
            "testStrategy": "Verificar que nx list mostra todos os apps conforme PRD, executar nx run-many --target=build --all para validar apps renomeados/criados, confirmar Node version com node --version ap√≥s nvm use"
          },
          {
            "id": 2,
            "title": "Configurar Module Boundaries e Tags no nx.json",
            "description": "Implementar sistema de tags e regras de depend√™ncia para enforce de boundaries entre contexts e apps",
            "status": "done",
            "dependencies": [
              1
            ],
            "details": "Configurar nx.json com tags: scope:auth, scope:deploy, scope:billing, scope:shared, type:app, type:lib, type:ui. Definir regras de depend√™ncia: apps podem importar de libs, contexts n√£o podem importar entre si, shared pode ser importado por todos. Configurar implicitDependencies para docker-compose e scripts globais. Atualizar targetDefaults para build, test, lint aproveitando configura√ß√£o Jest/Vitest existente.\n<info added on 2025-08-24T16:07:24.311Z>\n**Arquitetura de Comunica√ß√£o entre Microservi√ßos:**\n\n- api-gateway: √önico servi√ßo exposto em porta HTTP (3000) para comunica√ß√£o externa\n- service-auth: Comunica√ß√£o interna exclusivamente via RabbitMQ (sem porta HTTP exposta)\n- service-deploy: Comunica√ß√£o interna exclusivamente via RabbitMQ (sem porta HTTP exposta)\n- Demais servi√ßos: Comunica√ß√£o interna via RabbitMQ seguindo padr√£o de mensageria\n\n**Configura√ß√µes de Ports e Boundaries:**\n- Configurar tag adicional \"communication:http\" para api-gateway e \"communication:rabbitmq\" para servi√ßos internos\n- Definir regra de boundary impedindo que servi√ßos com tag \"communication:rabbitmq\" exponham portas HTTP\n- Incluir RabbitMQ nas implicitDependencies do docker-compose.yml\n- Configurar targetDefaults espec√≠ficos para servi√ßos de comunica√ß√£o interna vs externa\n</info added on 2025-08-24T16:07:24.311Z>\n<info added on 2025-08-24T16:16:43.964Z>\n**‚úÖ Implementa√ß√£o RabbitMQ Conclu√≠da:**\n\n- Corrigido warning de floating promise com `void bootstrap()` nos microservi√ßos\n- Configurado RabbitMQ como transport principal para comunica√ß√£o interna\n- Instaladas depend√™ncias necess√°rias: @nestjs/microservices, amqplib, @types/amqplib\n- Implementado sistema de filas espec√≠ficas por servi√ßo:\n  - service-auth: Fila 'auth_queue'\n  - service-deploy: Fila 'deploy_queue'\n- Configurado URL de conex√£o: amqp://usecapsule:usecapsule_dev_password@localhost:5672\n- Definido Transport.RMQ com QueueOptions durable: false para ambiente de desenvolvimento\n- Aplicadas corre√ß√µes de formata√ß√£o conforme regras do linter\n- Validado funcionamento da arquitetura de mensageria interna sem exposi√ß√£o de portas HTTP nos servi√ßos internos\n</info added on 2025-08-24T16:16:43.964Z>",
            "testStrategy": "Executar nx graph para visualizar depend√™ncias, criar import proibido entre contexts e validar que nx lint falha, verificar que nx affected detecta mudan√ßas corretamente"
          },
          {
            "id": 3,
            "title": "Configurar ESLint com Enforce Module Boundaries",
            "description": "Adicionar plugin @nx/enforce-module-boundaries ao ESLint existente para validar regras de depend√™ncia",
            "status": "done",
            "dependencies": [
              2
            ],
            "details": "Instalar @nx/enforce-module-boundaries plugin. Configurar regras no .eslintrc.json existente para enforce das tags definidas no nx.json. Adicionar regras espec√≠ficas: contexts n√£o podem importar entre si, apps s√≥ podem importar de libs, shared pode ser usado por todos. Configurar allow/disallow patterns para imports.\n<info added on 2025-08-24T16:49:10.847Z>\n**‚úÖ Configura√ß√£o Implementada:**\n\n**Regras de Depend√™ncia Configuradas:**\n- Apps (type:app, type:web, type:api) podem importar de qualquer lib (type:lib)\n- Contexts (scope:contexts) n√£o podem importar entre si, apenas de shared e ui\n- Shared (scope:shared) pode ser usado por todos\n- UI (scope:ui) pode ser usado por apps web e depende apenas de shared\n- Gateway, Auth e Deploy podem importar de qualquer lib\n\n**Valida√ß√£o Realizada:**\n- Executado nx run-many --target=lint --all (10/12 projetos passaram)\n- Corrigido warning de floating promise no api-gateway\n- Erros restantes s√£o apenas nos testes e2e (n√£o relevantes para boundaries)\n- Regras de module boundaries est√£o funcionando corretamente\n\n**Estrutura de Tags Utilizada:**\n- type:app, type:web, type:api, type:lib\n- scope:contexts, scope:shared, scope:ui, scope:gateway, scope:auth, scope:deploy\n- enforceBuildableLibDependency: true\n- allow patterns para arquivos de configura√ß√£o ESLint\n</info added on 2025-08-24T16:49:10.847Z>",
            "testStrategy": "Executar nx run-many --target=lint para verificar que boundaries s√£o respeitadas, criar imports inv√°lidos entre contexts e confirmar que lint falha, testar que imports v√°lidos passam no lint"
          },
          {
            "id": 4,
            "title": "Adicionar Scripts de Desenvolvimento no package.json",
            "description": "Criar scripts npm para desenvolvimento aproveitando Docker Compose existente",
            "status": "done",
            "dependencies": [
              1
            ],
            "details": "Adicionar scripts no package.json raiz: dev:all (executa todos os servi√ßos), dev:api (apenas backend services), dev:portal (apenas frontend), dev:cli (para testes do CLI). Criar scripts docker:up/down/reset usando docker-compose existente. Adicionar scripts para nx: affected:build, affected:test, affected:lint. Implementar script de setup inicial que valida depend√™ncias (Node 20, Docker, etc).",
            "testStrategy": "Executar npm run dev:all e verificar que todos os apps iniciam, testar scripts docker:* com docker-compose existente, verificar que scripts affected funcionam corretamente"
          },
          {
            "id": 5,
            "title": "Configurar CI/CD Base com GitHub Actions",
            "description": "Implementar workflow b√°sico de CI/CD aproveitando configura√ß√£o de testes existente",
            "status": "done",
            "dependencies": [
              3
            ],
            "details": "Criar .github/workflows/ci.yml com jobs para lint, test, build em matriz Node 20/22. Aproveitar configura√ß√£o Jest/Vitest existente. Configurar nx-cloud token para cache distribu√≠do. Adicionar job para validar module boundaries. Setup para executar testes e2e existentes. Configurar workflow para executar apenas em affected projects. Adicionar status checks obrigat√≥rios para PRs.\n<info added on 2025-08-24T21:38:42.212Z>\n**Migra√ß√£o para GitLab CI/CD:**\n\nO projeto utiliza GitLab CI/CD (.gitlab-ci.yml) ao inv√©s do GitHub Actions. Configura√ß√£o atual identificada:\n- Imagem base Node 20\n- Execu√ß√£o em main e merge_requests\n- Instala√ß√£o com `npm ci --legacy-peer-deps`\n- Setup Playwright para e2e\n- Comando `nx run-many -t lint test build typecheck e2e`\n- Hook `nx fix-ci` no after_script\n\n**Otimiza√ß√µes Necess√°rias:**\n- Implementar `nx affected` para executar apenas projetos modificados\n- Configurar cache do Nx Cloud com token de ambiente\n- Validar exist√™ncia de todos os targets nos projetos do workspace\n- Adicionar job espec√≠fico para valida√ß√£o de module boundaries\n- Configurar stages separados para melhor paraleliza√ß√£o\n- Implementar cache de node_modules e .nx/cache\n- Adicionar rules para otimizar execu√ß√£o baseada em mudan√ßas\n\n**Valida√ß√£o da Pipeline:**\nExecutar merge request de teste para verificar funcionamento completo, validar cache distribu√≠do, confirmar execu√ß√£o affected, e testar integra√ß√£o Playwright e2e.\n</info added on 2025-08-24T21:38:42.212Z>\n<info added on 2025-08-24T21:38:49.571Z>\n**T√≠tulo Atualizado:**\nSubtask renomeada para \"Otimizar GitLab CI/CD Base\" refletindo o uso real do GitLab CI/CD ao inv√©s do GitHub Actions.\n\n**Estrat√©gia de Teste Refinada:**\nExecutar pipeline GitLab CI/CD atrav√©s de merge request dedicado para valida√ß√£o completa. Verificar funcionamento correto de todos os jobs configurados, confirmar opera√ß√£o efetiva do cache distribu√≠do do Nx Cloud, validar que execu√ß√£o affected est√° otimizando builds apenas para projetos modificados, e assegurar integra√ß√£o completa dos testes e2e com Playwright no ambiente CI/CD.\n</info added on 2025-08-24T21:38:49.571Z>\n<info added on 2025-08-24T22:08:44.206Z>\n**‚úÖ Implementa√ß√£o GitLab CI/CD Otimizada Conclu√≠da:**\n\n**Configura√ß√£o Implementada:**\n- Removidas todas as depend√™ncias do Nx Cloud (sem servi√ßos externos)\n- Implementado cache local para node_modules/ e .nx/cache/\n- Configurado stages separados: setup, lint, test, build, e2e\n- Implementado nx affected para executar apenas projetos modificados\n- Adicionadas rules inteligentes para otimizar execu√ß√£o baseada em mudan√ßas\n- Configurado job de fallback para quando n√£o h√° projetos affected\n\n**Otimiza√ß√µes Realizadas:**\n- Cache baseado em package-lock.json para invalida√ß√£o autom√°tica\n- Execu√ß√£o affected com --base=origin/main --head=HEAD\n- Rules espec√≠ficas por tipo de arquivo para cada stage\n- E2E apenas na branch main e como manual (allow_failure: true)\n- Setup stage com artifacts para compartilhar depend√™ncias\n\n**Valida√ß√£o Realizada:**\n- Testado comando nx affected --target=lint funcionando corretamente\n- Verificado cache local .nx/cache/ operacional\n- Confirmado que todos os targets (lint, test, typecheck) existem nos projetos\n- Validado que build funciona para projetos que suportam\n\n**Estrutura Final:**\n- Setup: Instala depend√™ncias e configura ambiente\n- Lint: Valida qualidade de c√≥digo e module boundaries\n- Test: Executa testes unit√°rios\n- Build: Compila projetos (paralelo com typecheck)\n- Typecheck: Valida tipos TypeScript\n- E2E: Testes end-to-end (manual, apenas main)\n\n**Benef√≠cios Alcan√ßados:**\n- Zero depend√™ncias externas (sem Nx Cloud)\n- Execu√ß√£o otimizada apenas em projetos modificados\n- Cache local para builds mais r√°pidos\n- Pipeline paralelizado com stages separados\n- Rules inteligentes para otimizar execu√ß√£o\n</info added on 2025-08-24T22:08:44.206Z>",
            "testStrategy": "Verificar que GitHub Actions executa com sucesso em PR de exemplo, testar que apenas affected projects s√£o executados, validar que cache nx-cloud funciona corretamente"
          }
        ]
      },
      {
        "id": 2,
        "title": "Implementar Shared Libraries Base",
        "description": "Criar bibliotecas compartilhadas para types, utilities e configura√ß√µes comuns entre todos os servi√ßos",
        "details": "Em libs/shared: criar @capsule/types com DTOs usando class-validator 0.14+, @capsule/utils com helpers para logging (winston 3.11+), error handling, date formatting. Configurar @capsule/config com joi 17.11+ para valida√ß√£o de env vars. Implementar @capsule/errors com classes de erro customizadas seguindo RFC 7807. Setup @capsule/testing com fixtures e helpers para testes. Adicionar @capsule/ui-kit com componentes base para o portal usando Radix UI.",
        "testStrategy": "Testes unit√°rios para cada utility, valida√ß√£o de schemas com casos edge, testes de integra√ß√£o verificando que libraries s√£o import√°veis em todos os apps, testes de componentes UI com Testing Library",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Setup Infraestrutura Local com Docker Compose",
        "description": "Configurar ambiente de desenvolvimento local com todos os servi√ßos necess√°rios rodando em containers",
        "details": "Criar docker-compose.yml com PostgreSQL 15.5, Redis 7.2, RabbitMQ 3.12 com management plugin, Vault 1.15 em dev mode. Configurar networks isoladas (backend, frontend). Adicionar health checks para cada servi√ßo. Criar scripts npm para start/stop/reset do ambiente. Configurar volumes para persist√™ncia de dados. Adicionar Adminer para debug do banco.",
        "testStrategy": "Script de smoke test verificando conectividade com todos os servi√ßos, validar que containers reiniciam corretamente, testar persist√™ncia de dados ap√≥s restart",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Implementar Domain Context de Autentica√ß√£o",
        "description": "Criar bounded context de autentica√ß√£o seguindo DDD e Hexagonal Architecture com suporte a OAuth e email/password",
        "details": "Em libs/contexts/auth: implementar domain entities (User, Organization, Team, Role, Permission) com TypeORM 0.3.17+. Criar ports (UserRepository, AuthService interfaces). Implementar adapters com Passport.js 0.7+ para OAuth (Google, GitHub, GitLab) com foco especial em GitHub/GitLab para o fluxo de deploy m√°gico. Usar bcrypt 5.1+ para hashing. Implementar JWT com RS256 usando jose 5.1+. Criar refresh token rotation. Setup RBAC com CASL 6.5+. Adicionar session management para o portal.",
        "testStrategy": "Testes unit√°rios para domain logic, testes de integra√ß√£o para OAuth flows especialmente GitHub/GitLab, testes e2e simulando login completo no portal, valida√ß√£o de JWT signatures, testes de autoriza√ß√£o RBAC, testes de sess√£o e refresh token",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Implementar Domain Model e Entidades de Autentica√ß√£o",
            "description": "Criar as entidades de dom√≠nio (User, Organization, Session, OAuthProvider) e value objects (Email, Password, OAuthToken) seguindo DDD em libs/contexts/auth",
            "dependencies": [],
            "details": "Implementar entidades User com campos id, email, passwordHash, profile, createdAt, updatedAt. Organization com id, name, slug, ownerId, settings. Session com id, userId, token, expiresAt, refreshToken. OAuthProvider com id, userId, provider, providerId, accessToken, refreshToken. Value Objects: Email com valida√ß√£o RFC 5322, Password com regras de complexidade, OAuthToken com valida√ß√£o e expira√ß√£o. Usar TypeORM 0.3.17+ com decorators e migrations. Implementar m√©todos de dom√≠nio para valida√ß√£o e regras de neg√≥cio.",
            "status": "pending",
            "testStrategy": "Testes unit√°rios para valida√ß√£o de value objects, testes de dom√≠nio para regras de neg√≥cio das entidades, testes de integra√ß√£o com banco de dados in-memory, valida√ß√£o de constraints e relacionamentos"
          },
          {
            "id": 2,
            "title": "Implementar Ports e Adapters para Autentica√ß√£o",
            "description": "Criar interfaces de ports (UserRepository, AuthService, OAuthService) e implementar adapters com Passport.js para OAuth e bcrypt para hashing",
            "dependencies": [
              "4.1"
            ],
            "details": "Criar interfaces em domain/ports: IUserRepository com m√©todos findById, findByEmail, create, update. IAuthService com authenticate, validateToken, refreshToken. IOAuthService com authorize, callback, exchangeToken. Implementar adapters em infrastructure: TypeORMUserRepository, PassportAuthAdapter com strategies para GitHub e GitLab OAuth 2.0. Configurar Passport.js 0.7+ com passport-github2 e passport-gitlab2. Implementar bcrypt 5.1+ adapter para password hashing com salt rounds configur√°vel. Criar factory pattern para instanciar providers.",
            "status": "pending",
            "testStrategy": "Testes unit√°rios com mocks para cada adapter, testes de integra√ß√£o para OAuth flow com providers mockados, testes de seguran√ßa para password hashing, valida√ß√£o de interfaces com testes de contrato"
          },
          {
            "id": 3,
            "title": "Implementar JWT e Session Management",
            "description": "Desenvolver sistema de tokens JWT com RS256, refresh token rotation e gerenciamento de sess√µes para o portal",
            "dependencies": [
              "4.1",
              "4.2"
            ],
            "details": "Implementar JWTService usando jose 5.1+ com algoritmo RS256. Gerar par de chaves RSA para assinatura. Criar tokens com claims padr√£o (sub, iat, exp) e customizados (organizationId, permissions). Implementar refresh token rotation com invalida√ß√£o de tokens antigos. SessionManager para gerenciar sess√µes ativas com Redis. Configurar TTL para access tokens (15min) e refresh tokens (7 dias). Implementar revoga√ß√£o de tokens e logout em todos dispositivos. Adicionar jti (JWT ID) para tracking √∫nico.",
            "status": "pending",
            "testStrategy": "Testes de valida√ß√£o de assinatura JWT, testes de expira√ß√£o e refresh, testes de concorr√™ncia para rotation, testes de performance para valida√ß√£o de tokens, simula√ß√£o de ataques de replay"
          },
          {
            "id": 4,
            "title": "Implementar RBAC com CASL e Autoriza√ß√£o",
            "description": "Configurar sistema de autoriza√ß√£o baseado em roles e permissions usando CASL para o portal",
            "dependencies": [
              "4.1",
              "4.3"
            ],
            "details": "Implementar entidades Role e Permission com relacionamento many-to-many. Roles padr√£o: owner, admin, developer, viewer. Permissions granulares: project.create, project.delete, deployment.trigger, settings.update. Configurar CASL 6.5+ com ability factory. Criar middleware de autoriza√ß√£o para verificar permissions. Implementar heran√ßa de roles em Organization e Team levels. Cache de permissions com invalida√ß√£o em mudan√ßas. Audit log para a√ß√µes sens√≠veis. Suporte para resource-based permissions.",
            "status": "pending",
            "testStrategy": "Testes unit√°rios para regras de autoriza√ß√£o, testes de integra√ß√£o para heran√ßa de roles, testes de cen√°rios complexos de permiss√£o, valida√ß√£o de cache e invalida√ß√£o"
          },
          {
            "id": 5,
            "title": "Implementar API REST de Autentica√ß√£o",
            "description": "Criar endpoints REST para login, registro, OAuth callbacks e gerenciamento de perfil/organiza√ß√£o com seguran√ßa adequada",
            "dependencies": [
              "4.1",
              "4.2",
              "4.3",
              "4.4"
            ],
            "details": "Endpoints: POST /auth/register, POST /auth/login, POST /auth/refresh, POST /auth/logout, GET /auth/oauth/:provider, GET /auth/oauth/:provider/callback, GET /auth/me, PATCH /auth/me, GET /auth/sessions, DELETE /auth/sessions/:id. Implementar rate limiting com express-rate-limit (5 tentativas/min para login). CORS configuration para portal. Input validation com class-validator. Helmet.js para security headers. CSRF protection para state parameter em OAuth. Sanitiza√ß√£o de inputs contra XSS. Response formatting consistente com error handling.",
            "status": "pending",
            "testStrategy": "Testes e2e para fluxo completo de autentica√ß√£o, testes de seguran√ßa para rate limiting e valida√ß√£o, testes de integra√ß√£o para OAuth callbacks, valida√ß√£o de CORS e headers de seguran√ßa"
          }
        ]
      },
      {
        "id": 5,
        "title": "Desenvolver Service de Autentica√ß√£o",
        "description": "Criar microservi√ßo NestJS para autentica√ß√£o com endpoints REST e GraphQL",
        "details": "Em apps/service-auth: NestJS 10.3+ com Fastify adapter. Implementar AuthModule consumindo libs/contexts/auth. Endpoints: POST /auth/login, /auth/register, /auth/refresh, /auth/logout, OAuth callbacks com foco em GitHub/GitLab para integra√ß√£o com reposit√≥rios. GraphQL com Apollo Server 4+ para queries de user/org/team. Rate limiting com @nestjs/throttler. Helmet.js para security headers. Swagger/OpenAPI docs autom√°ticos. CORS configurado para o portal.",
        "testStrategy": "Testes e2e para todos os endpoints, testes de carga para rate limiting, valida√ß√£o de security headers, testes de integra√ß√£o com providers OAuth GitHub/GitLab, testes de CORS com origem do portal",
        "priority": "high",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Implementar Domain Context de Deploy",
        "description": "Criar bounded context para gerenciamento de deployments com suporte a diferentes estrat√©gias",
        "details": "Em libs/contexts/deploy: entities (Project, Environment, Deployment, Service, Container). Implementar state machine para deployment lifecycle usando XState 5+ com estados vis√≠veis no portal. Criar value objects para deployment strategies (BlueGreen, Canary, Rolling). Ports para ContainerRegistry, DeploymentOrchestrator. Implementar event sourcing com EventStore para auditoria completa. Adicionar entidades para integra√ß√£o com reposit√≥rios Git.",
        "testStrategy": "Testes unit√°rios para state transitions, testes de propriedade para invariantes de dom√≠nio, simula√ß√£o de cen√°rios de deploy complexos, testes de integra√ß√£o com reposit√≥rios Git",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Desenvolver Service de Deploy",
        "description": "Criar microservi√ßo para orquestra√ß√£o de deployments com integra√ß√£o a container registries",
        "details": "Em apps/service-deploy: NestJS com Bull 5.10+ para job queues. Integra√ß√£o com Docker Registry API v2, Harbor 2.9+, AWS ECR. Implementar deployment strategies com Kubernetes client-go via @kubernetes/client-node 0.20+. WebSocket para streaming de logs em tempo real para o portal. M√©tricas com prom-client 15+. Circuit breaker com opossum 8+. Webhook handlers para GitHub/GitLab para trigger autom√°tico de deploys.",
        "testStrategy": "Testes de integra√ß√£o com registry mock, testes e2e simulando deploy completo iniciado pelo portal, chaos testing para resili√™ncia, valida√ß√£o de rollback autom√°tico, testes de webhook com payloads reais",
        "priority": "high",
        "dependencies": [
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Implementar API Gateway com BFF Pattern",
        "description": "Criar API Gateway que agrega e orquestra chamadas aos microservi√ßos internos",
        "details": "Em apps/api-gateway: NestJS com GraphQL Federation via @apollo/gateway 2.5+. Implementar DataLoader para resolver N+1. Rate limiting por tenant com Redis. Request/Response transformation. API versioning com custom headers. Distributed tracing com OpenTelemetry. Cache com Redis e cache-manager 5+. WebSocket proxy para real-time features do portal. CORS e autentica√ß√£o para requisi√ß√µes do portal.",
        "testStrategy": "Testes de carga para verificar performance do DataLoader, testes e2e para federa√ß√£o GraphQL, valida√ß√£o de rate limiting por tenant, testes de WebSocket com cliente do portal",
        "priority": "high",
        "dependencies": [
          5,
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Desenvolver Portal MVP1 com Fluxo de Deploy M√°gico",
        "description": "Criar interface principal onde clientes fazem login, conectam reposit√≥rios e realizam o deploy m√°gico",
        "details": "Em apps/portal: React 18.2+ com Vite 5+. Implementar FSD com layers focadas no MVP1. UI com Radix UI + Tailwind CSS 3.4+. State management com Zustand 4.4+ para auth e deploy state. React Query 5+ para data fetching. P√°ginas: Login/Register com OAuth GitHub/GitLab, Dashboard com lista de projetos, Wizard de conex√£o de reposit√≥rio, P√°gina de deploy com logs em tempo real via WebSocket, Status de deployments. React Hook Form 7.48+ para wizard. Autentica√ß√£o com refresh token interceptor.",
        "testStrategy": "Testes de componentes cr√≠ticos do fluxo de deploy, testes e2e com Playwright para o fluxo completo de login ‚Üí conectar repo ‚Üí deploy, testes de usabilidade do wizard, valida√ß√£o de real-time updates",
        "priority": "high",
        "dependencies": [
          8
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Implementar Sistema de Autentica√ß√£o e Onboarding",
            "description": "Desenvolver p√°ginas de login/registro com OAuth GitHub/GitLab e fluxo de onboarding para novos usu√°rios",
            "dependencies": [],
            "details": "Criar p√°ginas de Login e Register usando React Hook Form 7.48+ com valida√ß√µes. Implementar OAuth flow com GitHub e GitLab para autentica√ß√£o e autoriza√ß√£o de acesso aos reposit√≥rios. Desenvolver fluxo de onboarding com wizard de 3 etapas: dados da organiza√ß√£o, conex√£o com provider Git, e configura√ß√µes iniciais. Integrar com Zustand para gerenciar estado de autentica√ß√£o e implementar refresh token interceptor com axios. Usar Radix UI Dialog para modais e Tailwind CSS para estiliza√ß√£o responsiva.",
            "status": "pending",
            "testStrategy": "Testes unit√°rios para valida√ß√µes de formul√°rio, testes de integra√ß√£o para OAuth flow mockando providers, testes e2e com Playwright para fluxo completo de registro ‚Üí onboarding ‚Üí dashboard, testes de acessibilidade com axe-core"
          },
          {
            "id": 2,
            "title": "Desenvolver Dashboard Principal e Listagem de Projetos",
            "description": "Criar interface principal do portal com dashboard mostrando projetos e m√©tricas b√°sicas",
            "dependencies": [
              "9.1"
            ],
            "details": "Implementar Dashboard com React Query 5+ para fetching de dados de projetos. Criar componentes de cards para exibir projetos com status de deployment, √∫ltima atualiza√ß√£o e a√ß√µes r√°pidas. Implementar filtros e busca com debounce. Adicionar gr√°ficos b√°sicos de m√©tricas usando Recharts. Criar empty states para usu√°rios sem projetos. Implementar navega√ß√£o com React Router 6+ e breadcrumbs. Usar Radix UI Dropdown Menu para a√ß√µes de projeto.",
            "status": "pending",
            "testStrategy": "Testes de componentes para cards e filtros, testes de integra√ß√£o com React Query mockando API responses, testes de performance para renderiza√ß√£o de listas grandes, testes e2e para navega√ß√£o entre p√°ginas"
          },
          {
            "id": 3,
            "title": "Criar Wizard de Conex√£o de Reposit√≥rio e Configura√ß√£o Nx",
            "description": "Desenvolver interface step-by-step para conectar reposit√≥rios Git e configurar projeto Nx automaticamente",
            "dependencies": [
              "9.1",
              "9.2"
            ],
            "details": "Implementar wizard multi-step com React Hook Form e valida√ß√£o por etapa. Step 1: Sele√ß√£o de provider (GitHub/GitLab) e listagem de reposit√≥rios via API. Step 2: Detec√ß√£o autom√°tica de tipo de projeto e sugest√£o de configura√ß√µes Nx. Step 3: Customiza√ß√£o de configura√ß√µes de build e deploy. Step 4: Review e confirma√ß√£o. Usar Radix UI Progress para indicador de progresso. Implementar auto-save de progresso no localStorage. Adicionar tooltips explicativos com Radix UI Tooltip.",
            "status": "pending",
            "testStrategy": "Testes unit√°rios para cada step do wizard, testes de integra√ß√£o para detec√ß√£o de tipo de projeto, testes e2e simulando conex√£o completa de reposit√≥rio, testes de edge cases como perda de conex√£o durante wizard"
          },
          {
            "id": 4,
            "title": "Implementar Interface de Deploy com Logs em Tempo Real",
            "description": "Criar p√°gina de deploy com progresso visual e streaming de logs via WebSocket",
            "dependencies": [
              "9.2",
              "9.3"
            ],
            "details": "Desenvolver p√°gina de deploy com terminal virtual para exibir logs usando react-terminal-ui. Implementar conex√£o WebSocket com reconnection logic para streaming de logs. Criar progress stepper mostrando fases do deploy (Build ‚Üí Test ‚Üí Deploy ‚Üí Verify). Adicionar bot√µes de a√ß√£o: pausar, cancelar, retry. Implementar auto-scroll com op√ß√£o de pausar. Usar React Query para polling de status quando WebSocket falhar. Criar notifica√ß√µes toast com Radix UI Toast para eventos importantes.",
            "status": "pending",
            "testStrategy": "Testes de componente para terminal e progress stepper, testes de WebSocket com mock server, testes de resili√™ncia simulando desconex√µes, testes e2e para fluxo completo de deploy com verifica√ß√£o de logs"
          },
          {
            "id": 5,
            "title": "Desenvolver Sistema de Status e Hist√≥rico de Deployments",
            "description": "Criar interface para visualizar status atual e hist√≥rico de todos os deployments com filtros avan√ßados",
            "dependencies": [
              "9.2",
              "9.4"
            ],
            "details": "Implementar p√°gina de deployments com tabela usando Tanstack Table para sorting/filtering. Criar timeline view para hist√≥rico de deployments por projeto. Adicionar badges de status com cores sem√¢nticas (success, failed, pending, cancelled). Implementar filtros por data, status, projeto e ambiente. Criar modal de detalhes com informa√ß√µes completas do deployment incluindo logs, artifacts e m√©tricas. Adicionar funcionalidade de compara√ß√£o entre deployments. Implementar export de relat√≥rios em CSV/PDF.",
            "status": "pending",
            "testStrategy": "Testes unit√°rios para componentes de tabela e filtros, testes de integra√ß√£o para export de dados, testes de performance com grandes volumes de dados, testes e2e para fluxo de visualiza√ß√£o e filtragem"
          }
        ]
      },
      {
        "id": 10,
        "title": "Implementar CLI com Commander.js",
        "description": "Desenvolver ferramenta de linha de comando para intera√ß√£o com a plataforma Capsule",
        "details": "Em apps/cli: Commander.js 11+ com TypeScript. Comandos: capsule deploy, capsule logs, capsule env, capsule secret. Autentica√ß√£o via API key ou browser OAuth flow. Progress bars com ora 7+. Tabelas com cli-table3. Config local em ~/.capsule/config.json. Auto-update com update-notifier. Telemetria opt-in com analytics-node.",
        "testStrategy": "Testes unit√°rios para cada comando, testes de integra√ß√£o com API mock, testes e2e simulando workflows completos, valida√ß√£o de output formatting",
        "priority": "medium",
        "dependencies": [
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Implementar Service Discovery e DNS Interno",
        "description": "Criar sistema de descoberta de servi√ßos com DNS interno para comunica√ß√£o entre microservi√ßos",
        "details": "Implementar service registry com etcd 3.5+ ou Consul 1.17+. DNS server customizado com node-dns ou CoreDNS sidecar. Formato: service-name.namespace.svc.internal. Health check integration para remover servi√ßos unhealthy. Client libraries para service discovery em cada linguagem. Load balancing com round-robin e least-connections. Circuit breaker autom√°tico.",
        "testStrategy": "Testes de resolu√ß√£o DNS, simula√ß√£o de falhas de servi√ßo, valida√ß√£o de load balancing, testes de performance para lookup time",
        "priority": "high",
        "dependencies": [
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Desenvolver Sistema de Configura√ß√£o e Secrets",
        "description": "Implementar gerenciamento centralizado de configura√ß√µes e secrets com integra√ß√£o ao Vault",
        "details": "Integra√ß√£o com HashiCorp Vault via node-vault 0.10+. Criar abstra√ß√£o para config sources (env vars, files, Vault). Implementar hot-reload de configs sem restart. Encryption at rest para secrets locais usando AES-256-GCM. Audit trail para todas as mudan√ßas. Template engine para interpola√ß√£o de valores. Valida√ß√£o de configs com JSON Schema. Interface no portal para gerenciar vari√°veis de ambiente por projeto.",
        "testStrategy": "Testes de integra√ß√£o com Vault, valida√ß√£o de encryption/decryption, testes de hot-reload, simula√ß√£o de rota√ß√£o de secrets, testes da UI de gerenciamento no portal",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Implementar Observability Stack",
        "description": "Configurar stack completa de observabilidade com logs, m√©tricas e traces",
        "details": "Logs: Winston com transport para Loki 2.9+. M√©tricas: Prometheus client com custom metrics. Traces: OpenTelemetry com Jaeger 1.51+ backend. Configurar Grafana 10.2+ com dashboards pr√©-configurados. Implementar correlation IDs. Log aggregation com Fluentd. Alerting com Prometheus Alertmanager. SLO/SLI tracking. Integra√ß√£o b√°sica no portal para visualiza√ß√£o de logs de deploy.",
        "testStrategy": "Validar que traces conectam corretamente entre servi√ßos, testar alertas com condi√ß√µes simuladas, verificar reten√ß√£o de dados, testar visualiza√ß√£o de logs no portal",
        "priority": "medium",
        "dependencies": [
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Desenvolver Preview Environments Autom√°ticos",
        "description": "Criar sistema para provisionar ambientes ef√™meros por PR/branch",
        "details": "Webhook integration com GitHub/GitLab/Bitbucket. Namespace isolation no Kubernetes. Gera√ß√£o de URLs √∫nicas com wildcard DNS. Lifecycle management com TTL configur√°vel. Resource quotas por preview. Banco de dados branching com thin cloning. Integra√ß√£o com CI/CD para deploy autom√°tico. Teardown autom√°tico ap√≥s merge/close.",
        "testStrategy": "Testes e2e criando PR e validando preview, verificar isolamento entre ambientes, testar limites de recursos",
        "priority": "medium",
        "dependencies": [
          7,
          11
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Implementar Blue-Green e Canary Deployments",
        "description": "Desenvolver estrat√©gias avan√ßadas de deployment com rollback autom√°tico",
        "details": "Implementar traffic splitting com Envoy Proxy 1.28+ ou Istio 1.20+. Canary analysis com Flagger 1.35+. M√©tricas customizadas para decis√£o de promo√ß√£o. Progressive rollout configur√°vel. A/B testing support com feature flags (Unleash 5+). Rollback autom√°tico baseado em error rate, latency, custom metrics. Shadow traffic para valida√ß√£o.",
        "testStrategy": "Testes simulando degrada√ß√£o de performance, valida√ß√£o de traffic splitting percentages, testes de rollback autom√°tico",
        "priority": "medium",
        "dependencies": [
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 16,
        "title": "Desenvolver Managed Broker Marketplace",
        "description": "Criar sistema para provisionar message brokers gerenciados on-demand",
        "details": "Operators para RabbitMQ 3.12+, Redis 7.2+, Kafka 3.6+. Multi-tenancy com vhosts/namespaces. Backup autom√°tico com Velero 1.12+. Monitoring espec√≠fico por broker. Quotas de mensagens/conex√µes. TLS obrigat√≥rio com cert-manager. Auto-scaling baseado em queue depth. Disaster recovery com replica√ß√£o cross-region.",
        "testStrategy": "Testes de provisionamento multi-tenant, valida√ß√£o de isolamento, testes de performance sob carga, simula√ß√£o de disaster recovery",
        "priority": "low",
        "dependencies": [
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 17,
        "title": "Implementar Network Policies GUI",
        "description": "Criar interface visual para configura√ß√£o de pol√≠ticas de rede sem YAML",
        "details": "React Flow 11+ para visualiza√ß√£o de rede no portal. Drag-and-drop para criar conex√µes. Templates pr√©-definidos (web app, API, database). Valida√ß√£o em tempo real de pol√≠ticas. Gera√ß√£o de NetworkPolicy YAML/JSON. Simulador de tr√°fego para testar pol√≠ticas. Versionamento de pol√≠ticas. Import/export de configura√ß√µes. Integra√ß√£o com a p√°gina de projeto no portal.",
        "testStrategy": "Testes de usabilidade com usu√°rios, valida√ß√£o de pol√≠ticas geradas, testes e2e do fluxo completo de cria√ß√£o no portal",
        "priority": "low",
        "dependencies": [
          9
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 18,
        "title": "Desenvolver Sistema de Billing",
        "description": "Implementar domain context e servi√ßo para cobran√ßa e tracking de uso",
        "details": "Em libs/contexts/billing: entities para Plan, Subscription, Usage, Invoice. Integra√ß√£o com Stripe 14+ para pagamentos. Usage tracking com ClickHouse 23.10+ para analytics. Implementar metering para CPU/memory/bandwidth/storage. Alertas de quota. Invoicing autom√°tico. Dunning para failed payments. Revenue recognition compliance.",
        "testStrategy": "Testes de integra√ß√£o com Stripe test mode, valida√ß√£o de c√°lculos de usage, testes de billing cycles, simula√ß√£o de upgrades/downgrades",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 19,
        "title": "Implementar Autoscaling Leve",
        "description": "Desenvolver sistema de autoscaling baseado em m√©tricas customiz√°veis",
        "details": "HPA (Horizontal Pod Autoscaler) com custom metrics API. Suporte para CPU, memory, RPS, queue depth. Implementar predictive scaling com Prophet. Cooldown periods configur√°veis. Cost-aware scaling. Scheduled scaling para padr√µes conhecidos. Integration com cluster-autoscaler. Notifications para scaling events.",
        "testStrategy": "Testes de carga para trigger de scaling, valida√ß√£o de cooldown periods, testes de cost optimization, simula√ß√£o de traffic spikes",
        "priority": "low",
        "dependencies": [
          13
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 20,
        "title": "Desenvolver Export/Import Port√°vel",
        "description": "Criar sistema para exportar configura√ß√µes em formatos padr√£o reduzindo vendor lock-in",
        "details": "Exporters para Kubernetes YAML, Helm Charts 3.13+, Terraform 1.6+ HCL. Preservar sem√¢ntica de configura√ß√µes. Implementar importers para migra√ß√£o reversa. Valida√ß√£o de schemas. Dry-run mode. Diff visualization. Suporte para partial exports. Encryption de exports sens√≠veis. Versionamento de formato.",
        "testStrategy": "Testes de round-trip (export ‚Üí import ‚Üí export), valida√ß√£o em clusters Kubernetes reais, testes de compatibilidade entre vers√µes",
        "priority": "low",
        "dependencies": [
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 21,
        "title": "Implementar Detec√ß√£o Autom√°tica de Apps Nx",
        "description": "Criar sistema inteligente para detectar e configurar apps em monorepos Nx automaticamente",
        "details": "Parser de workspace.json/project.json do Nx. Detec√ß√£o de frameworks via package.json e file patterns. Infer√™ncia de tipo (frontend/backend/library). An√°lise de depend√™ncias com nx graph. Gera√ß√£o autom√°tica de Dockerfile multi-stage otimizado. Detec√ß√£o de portas e health check endpoints. Build caching com Nx Cloud integration. UI no portal mostrando apps detectados com op√ß√£o de configura√ß√£o manual.",
        "testStrategy": "Testes com diferentes estruturas de monorepo, valida√ß√£o de detec√ß√£o de frameworks populares, testes de build optimization, testes da UI de detec√ß√£o no portal",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 22,
        "title": "Desenvolver GitHub Actions Integration",
        "description": "Criar workflows e actions para CI/CD integrado com Capsule",
        "details": "GitHub Action customizada para Capsule deploy. Workflows templates para monorepo Nx. Integration com GitHub Deployments API. Status checks autom√°ticos. Secret scanning com Trufflehog. SAST com Semgrep. Container scanning com Trivy. Dependency updates com Renovate. Performance budgets com Lighthouse CI. Configura√ß√£o autom√°tica via portal ao conectar reposit√≥rio.",
        "testStrategy": "Testes em reposit√≥rio real, valida√ß√£o de todos os status checks, testes de seguran√ßa com vulnerabilidades conhecidas, teste do fluxo de configura√ß√£o via portal",
        "priority": "medium",
        "dependencies": [
          10
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 23,
        "title": "Implementar Multi-tenancy e Isolamento",
        "description": "Desenvolver isolamento completo entre tenants para seguran√ßa e compliance",
        "details": "Namespace isolation no Kubernetes. Network policies deny-by-default. Resource quotas por organiza√ß√£o. RBAC com OPA (Open Policy Agent) 0.58+. Pod Security Standards enforcement. Audit logging com Falco 0.36+. Data isolation no banco com RLS. Encryption per-tenant com KMS. Compliance reports (SOC2, ISO27001).",
        "testStrategy": "Penetration testing entre tenants, valida√ß√£o de quotas e limites, auditoria de acessos, testes de compliance",
        "priority": "high",
        "dependencies": [
          4,
          11
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 24,
        "title": "Desenvolver Local Development Experience",
        "description": "Criar ferramentas para desenvolvimento local que emulem o ambiente Capsule",
        "details": "Tilt 0.33+ para hot reload de Kubernetes local. Kind ou k3d para cluster local. Telepresence 2.17+ para debugging remoto. Skaffold 2.9+ para build/deploy workflow. Local service discovery com dnsmasq. Fake cloud services com LocalStack. Dev containers com padr√µes consistentes. Nx executors customizados.",
        "testStrategy": "Testes de developer experience, medi√ß√£o de tempo de feedback loop, valida√ß√£o de paridade com produ√ß√£o",
        "priority": "medium",
        "dependencies": [
          3,
          10
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 25,
        "title": "Implementar Disaster Recovery e Backup",
        "description": "Desenvolver sistema completo de backup e recupera√ß√£o de desastres",
        "details": "Velero 1.12+ para backup de Kubernetes resources. Database backups com pgBackRest para Postgres. Point-in-time recovery. Cross-region replication. RTO < 1 hora, RPO < 15 minutos. Automated disaster recovery drills. Backup encryption com age. Imut√°vel backup storage. Runbooks automatizados para recovery.",
        "testStrategy": "Disaster recovery drills mensais, testes de restore em ambiente isolado, valida√ß√£o de RTO/RPO, chaos engineering",
        "priority": "medium",
        "dependencies": [
          7,
          12
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 26,
        "title": "Criar Sistema de Design e Componentes UI Base",
        "description": "Implementar sistema completo de design tokens, componentes base e hooks utilit√°rios na biblioteca @ui/react, incluindo componentes de layout, navega√ß√£o, feedback e dados, com total integra√ß√£o ao Tailwind CSS e acessibilidade.",
        "details": "Em libs/ui/react, criar estrutura modular:\n\n**Design Tokens (tokens/)**\n- Cores: primitivas e sem√¢nticas seguindo design do Figma\n- Tipografia: scale system com clamp() para responsividade\n- Espa√ßamentos: sistema 4px/8px com scale harm√¥nica\n- Sombras: elevation system com 5 n√≠veis\n- Bordas: radius tokens e width variations\n- Breakpoints: mobile-first com container queries\n- Anima√ß√µes: duration e easing tokens\n\n**Componentes Base (components/)**\n- Button: variants (primary, secondary, ghost, danger), sizes, loading state, icon support\n- Input: text, password, number, com valida√ß√£o e error states\n- Select: native e custom com Radix UI\n- Checkbox/Radio: acess√≠veis com labels associados\n- Switch: toggle com anima√ß√£o suave\n- Card: composable com Card.Header, Card.Body, Card.Footer\n- Modal: com Portal, focus trap, ESC handling via Radix Dialog\n\n**Componentes de Layout (layout/)**\n- Container: responsive com max-width configur√°vel\n- Grid: CSS Grid wrapper com gap e responsive columns\n- Flex: wrapper com props intuitivas (align, justify, gap)\n- Stack: vertical/horizontal com spacing\n- Divider: horizontal/vertical com variantes\n\n**Componentes de Navega√ß√£o (navigation/)**\n- Navbar: responsive com mobile menu, suporte a dropdowns\n- Sidebar: collapsible, com grupos e nested items\n- Breadcrumb: com separador customiz√°vel e truncate\n- Tabs: controlled/uncontrolled com Radix UI\n- Pagination: com range display e jump to page\n\n**Componentes de Feedback (feedback/)**\n- Toast: com react-hot-toast, posi√ß√µes configur√°veis\n- Alert: info, success, warning, error com √≠cones\n- Loading: spinner, skeleton, progress bar\n- Empty State: com ilustra√ß√£o e CTA opcional\n\n**Componentes de Dados (data/)**\n- Table: sortable, filterable, com sele√ß√£o de linhas\n- DataGrid: virtualiza√ß√£o com @tanstack/react-virtual\n- Search: com debounce e clear button\n- Badge: com variantes de cor e tamanho\n- Avatar: com fallback e status indicator\n\n**Hooks Utilit√°rios (hooks/)**\n- useTheme: toggle dark/light com persistence\n- useMediaQuery: com SSR safety\n- useDebounce: para inputs de busca\n- useLockBodyScroll: para modais\n- useClickOutside: detec√ß√£o de cliques externos\n- useFocusTrap: para acessibilidade em modais\n- useId: ID √∫nico para labels ARIA\n\n**Sistema de Tipografia**\n```typescript\n// Responsive type scale\nconst typography = {\n  h1: 'clamp(2rem, 5vw, 3rem)',\n  h2: 'clamp(1.5rem, 4vw, 2.25rem)',\n  body: 'clamp(1rem, 2vw, 1.125rem)',\n  // ...\n}\n```\n\n**Integra√ß√£o Tailwind CSS**\n- Custom plugin para design tokens\n- Utility classes para todos os componentes\n- CSS-in-JS com CVA (class-variance-authority)\n- Suporte a arbitrary values\n\n**Acessibilidade**\n- ARIA labels e roles apropriados\n- Keyboard navigation completa\n- Focus indicators vis√≠veis\n- Screen reader announcements\n- Reduced motion support\n\n**Documenta√ß√£o**\n- Storybook 7.5+ com stories para cada componente\n- Props documentation com TypeScript\n- Exemplos de composi√ß√£o\n- Guidelines de uso e boas pr√°ticas\n- Playground interativo\n\n**Performance**\n- Tree-shaking friendly exports\n- Lazy loading para componentes pesados\n- Memoiza√ß√£o onde apropriado\n- Bundle size monitoring\n\n**Testes**\n- Testing Library para componentes\n- Axe-core para acessibilidade\n- Visual regression com Chromatic\n- Bundle size tests",
        "testStrategy": "Testes unit√°rios para cada componente verificando renderiza√ß√£o e comportamento. Testes de acessibilidade com jest-axe validando ARIA e keyboard navigation. Testes de integra√ß√£o para hooks verificando SSR compatibility. Visual regression tests no Storybook para detectar mudan√ßas n√£o intencionais. Testes de performance medindo render time e re-renders. Valida√ß√£o de tree-shaking importando componentes individuais. Testes de tema verificando persist√™ncia e mudan√ßa din√¢mica. Testes responsivos em diferentes viewports. Valida√ß√£o de TypeScript types com tsd. Testes de composi√ß√£o criando layouts complexos com os componentes.",
        "status": "pending",
        "dependencies": [
          2
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Implementar Design Tokens e Sistema de Cores",
            "description": "Criar estrutura base de design tokens incluindo cores primitivas e sem√¢nticas baseadas no Figma, sistema de tipografia responsiva com clamp(), espa√ßamentos harm√¥nicos, sombras com elevation system, bordas e anima√ß√µes",
            "dependencies": [],
            "details": "Em libs/ui/react/tokens/, implementar: cores primitivas (violeta, verde, amarelo, fundos escuros) e sem√¢nticas (primary, secondary, success, warning, error); tipografia com scale system responsivo usando clamp() para h1-h6, body, caption; espa√ßamentos baseados em 4px/8px (space-1 at√© space-12); sombras com 5 n√≠veis de eleva√ß√£o; border radius tokens (sm: 4px, md: 8px, lg: 16px, xl: 24px); breakpoints mobile-first (sm: 640px, md: 768px, lg: 1024px, xl: 1280px); anima√ß√µes com duration (fast: 150ms, normal: 300ms, slow: 500ms) e easing functions. Exportar como CSS custom properties e objeto TypeScript. Criar plugin Tailwind para integra√ß√£o completa.\n<info added on 2025-08-24T22:37:03.592Z>\n**‚úÖ IMPLEMENTA√á√ÉO CONCLU√çDA COM SUCESSO!**\n\nSistema de Design Tokens totalmente implementado em libs/ui/react/tokens/ com:\n\n**Cores Implementadas:**\n- Primitivas: violeta (#8b5cf6), verde (#10b981), amarelo (#f59e0b), vermelho (#ef4444), azul (#3b82f6)\n- Fundos escuros: primary (#13141a), secondary (#0a0b0d), surface (#1c1d24), elevated (#2c2d37)\n- Bordas e texto com estados completos (hover, active, disabled)\n- Cores sem√¢nticas com gradientes e fun√ß√µes utilit√°rias\n\n**Tipografia Responsiva:**\n- Sistema clamp() para h1-h6, body, ui, code, caption, label\n- Fam√≠lias: Inter (sans), JetBrains Mono (mono)\n- Pesos completos (100-900) e alturas de linha\n- Classes CSS e fun√ß√µes TypeScript\n\n**Espa√ßamentos Harm√¥nicos:**\n- Sistema 4px base: 1 (4px) at√© 64 (256px)\n- Espa√ßamentos sem√¢nticos e responsivos\n- Classes para padding, margin, gap\n\n**Bordas e Eleva√ß√£o:**\n- Border radius: none at√© full (9999px)\n- Sistema elevation com 6 n√≠veis (0-5)\n- Sombras coloridas e especiais (inner, focus)\n\n**Breakpoints e Anima√ß√µes:**\n- Mobile-first: xs (320px) at√© 2xl (1536px)\n- Dura√ß√µes: fast (150ms) at√© slowest (1000ms)\n- Easing functions e anima√ß√µes predefinidas\n\n**Integra√ß√£o Completa:**\n- Plugin Tailwind customizado\n- Vari√°veis CSS completas\n- Fun√ß√£o utilit√°ria cn() para classes\n- 26 testes passando\n- Tipos TypeScript completos\n- Documenta√ß√£o inline\n\nEstrutura criada: colors.ts, typography.ts, spacing.ts, borders.ts, breakpoints.ts, index.ts, tailwind-plugin.ts, tokens.css, utils.ts e testes completos.\n</info added on 2025-08-24T22:37:03.592Z>",
            "status": "done",
            "testStrategy": "Testes unit√°rios validando valores dos tokens, testes de snapshot para garantir consist√™ncia, testes visuais no Storybook mostrando aplica√ß√£o dos tokens"
          },
          {
            "id": 2,
            "title": "Desenvolver Componentes Base e Formul√°rios",
            "description": "Implementar componentes fundamentais incluindo Button com variantes e estados, inputs com valida√ß√£o, Select, Checkbox, Radio, Switch, Card composable e Modal acess√≠vel com Radix UI",
            "dependencies": [
              "26.1"
            ],
            "details": "Em libs/ui/react/components/, criar: Button com variants (primary com gradiente violeta, secondary, ghost, danger), sizes (sm, md, lg), estados (loading, disabled), suporte a √≠cones; Input com tipos (text, password, number, email), valida√ß√£o integrada, error/success states, label flutuante; Select nativo e custom com Radix UI Select; Checkbox e Radio com labels associados e estados indeterminate; Switch toggle com anima√ß√£o suave; Card composable (Card.Header, Card.Body, Card.Footer) com variantes de eleva√ß√£o; Modal usando Radix Dialog com Portal, focus trap, ESC handling, overlay com blur. Todos os componentes devem usar CVA para variantes, forwardRef para refs, e ARIA completo.",
            "status": "pending",
            "testStrategy": "Testes unit√°rios com Testing Library para cada componente, testes de acessibilidade com jest-axe, testes de intera√ß√£o para estados e eventos, visual regression tests"
          },
          {
            "id": 3,
            "title": "Criar Componentes de Layout e Navega√ß√£o",
            "description": "Desenvolver sistema de layout responsivo com Container, Grid, Flex, Stack e componentes de navega√ß√£o incluindo Navbar responsiva, Sidebar collapsible, Breadcrumb, Tabs e sistema de Pagination",
            "dependencies": [
              "26.1",
              "26.2"
            ],
            "details": "Em libs/ui/react/layout/, implementar: Container com max-width configur√°vel e padding responsivo; Grid wrapper para CSS Grid com props para columns, gap, areas; Flex com props intuitivas (align, justify, direction, wrap, gap); Stack vertical/horizontal com spacing consistente; Divider com orienta√ß√£o e variantes. Em libs/ui/react/navigation/: Navbar responsiva com logo, menu items, mobile hamburger menu, suporte a dropdowns aninhados; Sidebar collapsible com grupos, √≠cones, nested items, estado persistente; Breadcrumb com separador customiz√°vel, truncate para paths longos, navega√ß√£o por teclado; Tabs controlled/uncontrolled usando Radix UI Tabs com indicador animado; Pagination com range display, jump to page, tamanhos configur√°veis, acessibilidade completa.",
            "status": "pending",
            "testStrategy": "Testes de responsividade em diferentes viewports, testes de navega√ß√£o por teclado, testes de estado para componentes interativos, testes de acessibilidade WCAG 2.1"
          },
          {
            "id": 4,
            "title": "Implementar Componentes de Feedback e Dados",
            "description": "Criar sistema de feedback com Toast notifications, Alert, Loading states, Empty States e componentes de dados incluindo Table sortable/filterable, DataGrid virtualizado, Search com debounce, Badge e Avatar",
            "dependencies": [
              "26.1",
              "26.2"
            ],
            "details": "Em libs/ui/react/feedback/, desenvolver: Toast usando react-hot-toast com posi√ß√µes configur√°veis, auto-dismiss, a√ß√µes customizadas; Alert com variants (info azul, success verde, warning amarelo, error vermelho), √≠cones apropriados, dismissible opcional; Loading com Spinner animado, Skeleton screens para placeholders, Progress bar com porcentagem; Empty State com ilustra√ß√£o SVG, t√≠tulo, descri√ß√£o e CTA opcional. Em libs/ui/react/data/: Table com colunas sortable, filtros por coluna, sele√ß√£o de linhas, pagination integrada, sticky header; DataGrid com virtualiza√ß√£o usando @tanstack/react-virtual para grandes datasets; Search input com debounce configur√°vel, clear button, loading state durante busca; Badge com variantes de cor seguindo design tokens, tamanhos (sm, md), removable opcional; Avatar com imagem, fallback para iniciais, status indicator (online, offline, busy), tamanhos variados.",
            "status": "pending",
            "testStrategy": "Testes de performance para componentes com grandes datasets, testes de intera√ß√£o para sorting/filtering, testes de acessibilidade para an√∫ncios de screen readers"
          },
          {
            "id": 5,
            "title": "Desenvolver Hooks Utilit√°rios e Documenta√ß√£o Completa",
            "description": "Implementar hooks reutiliz√°veis para funcionalidades comuns e criar documenta√ß√£o completa no Storybook com exemplos interativos, guidelines de uso e playground para experimenta√ß√£o",
            "dependencies": [
              "26.1",
              "26.2",
              "26.3",
              "26.4"
            ],
            "details": "Em libs/ui/react/hooks/, criar: useTheme para toggle dark/light mode com persist√™ncia no localStorage e contexto global; useMediaQuery com SSR safety retornando matches para breakpoints; useDebounce gen√©rico para throttling de valores; useLockBodyScroll para prevenir scroll durante modais; useClickOutside para detectar cliques fora de elementos; useFocusTrap para manter foco dentro de containers; useId para gerar IDs √∫nicos ARIA-safe. Configurar Storybook 7.5+ com: stories para cada componente mostrando todas as variantes; controles interativos para props; documenta√ß√£o de props via TypeScript; exemplos de composi√ß√£o e casos de uso reais; guidelines de acessibilidade e boas pr√°ticas; medi√ß√£o de bundle size por componente; playground com live code editor; temas dark/light switchable; grid de √≠cones dispon√≠veis; p√°gina de tokens visuais.",
            "status": "pending",
            "testStrategy": "Testes unit√°rios para cada hook verificando comportamento e edge cases, testes de SSR compatibility, testes E2E no Storybook validando interatividade, testes de bundle size com limites definidos"
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-08-24T15:09:23.310Z",
      "updated": "2025-08-24T22:37:06.939Z",
      "description": "Tasks for master context"
    }
  }
}